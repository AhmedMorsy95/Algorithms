/// define 2 objects of dynamic 
/// insert into 1 and delete into 1 and sol = difference
const int LOGN=20;
int next_id = 0;

struct Node
{   Node *suff;
    Node *next[26];
    vector<int> pats;
    vector<char> out;
    int id; /* for debugging only */

    Node()
    {   id = next_id++;
        suff = 0;
        for(int i = 0; i < 26; i++)
        {   next[i] = 0;
        }
    }
};

struct AhoCorasick
{   Node *trie;
    AhoCorasick(){;}
    Node *suffix(Node *x, char y)
    {   int c=y-'a';
        while(x->next[c] == 0)
        {   x = x->suff;
        }
        return x->next[c];
    }

    void insert(Node *x, string s, int id)
    {   for(int i = 0; i < s.size(); i++)
        {   if(x->next[s[i]-'a'] == 0)
            {   x->next[s[i]-'a'] = new Node;
                x->out.push_back(s[i]);
            }
            x = x->next[s[i]-'a'];
        }
        x->pats.push_back(id);
    }

    public:
    AhoCorasick(vector<string> &p)
    {   trie = new Node;

        for(int i = 0; i < p.size(); i++)
        {   insert(trie, p[i], i);
        }

        queue<Node *> q;
        for(int i = 0; i < 26; i++)
        {   if(trie->next[i])
            {   trie->next[i]->suff = trie;
                q.push(trie->next[i]);
            }
            else
            {   trie->next[i] = trie;
            }
        }

        while(q.empty() == 0)
        {   Node *x = q.front(); q.pop();
            for(int i = 0; i < x->out.size(); i++)
            {   Node *y = x->next[x->out[i]-'a'];
                y->suff = suffix(x->suff, x->out[i]);
                y->pats.insert(y->pats.end(), y->suff->pats.begin(), y->suff->pats.end());
                q.push(y);
            }
        }
    }

    int  match(string s)
    {   Node *x = trie;
        int cnt = 0;
        for(int i = 0; i < s.size(); i++)
        {   x = suffix(x, s[i]);
            //x->pats contains id's of matched patterns
            cnt+=(int)x->pats.size();
        }
        return cnt;
    }
};
struct dynamic_aho{
   vector<string>v[LOGN];
   AhoCorasick a[LOGN];
   void add(string s){
       vector<string>cur;
       cur.pb(s);
       lp(i,0,LOGN-1){
            if(v[i].size()==cur.size()){
               lp(j,0,v[i].size()-1)
                 cur.pb(v[i][j]);
               v[i].clear();
               delete(a[i].trie);
            }
            else{
               v[i]=cur;
               a[i]=AhoCorasick(v[i]);
               break;
            }
       }
   }
   int get(string s){
       int sol=0;
       lp(i,0,LOGN-1){
           if(v[i].size())
            sol+=a[i].match(s);
       }
       return sol;
   }
};
