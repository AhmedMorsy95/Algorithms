/*
Till the roof comes off, till the lights go out
Till my legs give out, canâ€™t shut my mouth.
Till the smoke clears out. Am I high? Perhaps
I'ma rip this shit till my bones collapse.
*/
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <stack>
#include <string.h>
#include <map>
#include <vector>
#include <queue>
#include <math.h>
#include <stack>
#include <complex>


#define ll long long
#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)

using namespace std;

const int N=100005;
typedef pair<int,int>ii;
typedef pair<ii,int>event;
typedef complex<double>point;

const double EPS = 1e-9;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }


int ccw(point a, point b, point c) {
  point v1(b - a), v2(c - a);
  double t = cp(v1, v2);
  if (t > +EPS)
	return +1;
  if (t < -EPS)
	return -1;
  if (v1.X * v2.X < -EPS || v1.Y * v2.Y < -EPS)/// opposite directions
	return -1;
  if (norm(v1) < norm(v2) - EPS)
	return +1;
  return 0;/// in range [a,b]
}
bool intersection(point p1,point p2,point p3,point p4){
  bool x=(p1==p2),y=(p3==p4);
  if(x&&y)return p1==p3;
  if(x) return ccw(p3,p4,p1)==0;
  if(y) return ccw(p1,p2,p3)==0;
  return ccw(p1,p2,p3)*ccw(p1,p2,p4) <=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;
}

int main()
{
     //freopen("test.in","r",stdin);
    // freopen("test.out","w",stdout);
    int t;
    scanf("%d",&t);
    while(t--){
        double z[4];
        for(int i=0;i<4;i++)scanf("%lf",&z[i]);
        point a=point(z[0],z[1]),b=point(z[2],z[3]);
        for(int i=0;i<4;i++)scanf("%lf",&z[i]);
        if(intersection(a,b,point(z[0],z[1]),point(z[0],z[3])))printf("T\n");
        else if(intersection(a,b,point(z[0],z[1]),point(z[2],z[1])))printf("T\n");
        else if(intersection(a,b,point(z[2],z[3]),point(z[2],z[1])))printf("T\n");
        else if(intersection(a,b,point(z[2],z[3]),point(z[0],z[3])))printf("T\n");
        else if(min(z[0],z[2])<=min(a.X,b.X)&&min(z[1],z[3])<=min(a.Y,b.Y)&&max(a.X,b.X)<=max(z[0],z[2])&&max(a.Y,b.Y)<=max(z[1],z[3]))printf("T\n");
        else printf("F\n");
    }
  return 0;
}

