#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-8
#define BASE 53ll
#define mod 1000000007ll
#define ld long double
#define MAX 900001
#define NIL 0
#define INF (1<<28)

typedef pair<int,int>ii;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
const int N=300005;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll fact(ll n){ll ret=1;for(int i=1;i<=n;i++)ret*=i;return ret;}
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

int n,m,a,b,low[N],num[N],cnt=1,par[N],c=1,id[N];
vector<ii>adj[N];
vector<edge>st;
void bcc(int node){
   low[node]=num[node]=cnt++;
   int children=0;
   for(int i=0;i<adj[node].size();i++){
        int to=adj[node][i].F;
        if(!num[to]){
            children++;
            par[to]=node;
            st.pb(edge(adj[node][i].S,ii(node,to)));
            bcc(to);
            low[node]=min(low[node],low[to]);/// check if to has a connection of one of us ancestors
            if((num[node]==1&&children>1)||(num[node]>1&&low[to]>=num[node])){/// if node is the root and has more than 1 child or my child cannot reach an ancestor just me or lower
                  while(st.back().S!=ii(node,to)){
                      edge cur=st.back();
                      st.pop_back();
                  }
                  st.pop_back();
            }
        }
        else if(to!=par[node]&&num[to]<low[node]){
              low[node]=min(low[node],num[to]);
              st.pb(edge(adj[node][i].S,ii(node,to)));
        }
   }
}

int main()
{
  // freopen("test.in","r",stdin);
   scanf("%d%d",&n,&m);
   for(int i=0;i<m;i++){
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        adj[a].pb(ii(b,c));
        adj[b].pb(ii(a,c));
   }
   scanf("%d%d",&a,&b);
        bcc(a);
        while(st.size()){
            st.pop_back();
        }
   return 0;
}

