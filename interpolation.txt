#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-8
#define BASE 53ll
#define mod 1000000007ll
#define ld long double
#define MAX 900001
#define NIL 0
#define INF (1<<28)
#define lp(i,a,n) for(int i=(a);i<=(int)(n);i++)

typedef pair<int,int>ii;
typedef pair<ii,int>state;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
const int N=1000006;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

ll n,k,fact[N];
int power(int base,int p){
  ll ret=1,cur=base;
  while(p){
     if(p&1)ret*=cur,ret%=mod;
     cur=cur*cur;
     cur%=mod;
     p/=2;
  }
  return ret;
}
ll modInverse(ll x){
   return power(x,mod-2);
}
int main()
{
   //freopen("test.in","r",stdin);
   cin>>n>>k;
   if(n<=k+2){/// cannot use interpolation
     ll sum=0;
     for(int i=1;i<=n;i++){
        sum+=power(i,k);
        sum%=mod;
     }
     cout<<sum;
     return 0;
   }
   fact[0]=1;
   for(int i=1;i<N;i++)fact[i]=(fact[i-1]*i)%mod;
   /// degree is k+1 so we need k+2 points min
   /// this solution is valid if n>k+2
   ll numerator=1;
   for(int i=1;i<=k+2;i++){
      numerator*=(n-i);
      numerator%=mod;
   }
   ll sum=0,powers=0;
   for(int i=1;i<=k+2;i++){
       /// remove from numerator (n-i) using modInverse
       numerator*=modInverse(n-i);
       numerator%=mod;
       /// calculate denominator (i-1)*(i-2)*(i-(i-1))*(i-(i+1))*(i-n)
       /// divide into 2 components
       powers+=power(i,k);/// why this line ? this function is supposed to get the sum of 1^k 2^k....n^k
       /// so the pairs we use (x,y) are for each X the sum of i=1 -> k i^k
       powers%=mod;
       ll deno=fact[i-1]*fact[(k+2)-i];
       deno%=mod;
       if(((k+2)-i)%2)deno*=(mod-1);
       deno%=mod;
       sum+=((numerator*modInverse(deno))%mod)*powers;
       //cout<<numerator<<' '<<deno<<' '<<power(i,k)<<' ';
       sum%=mod;
       ///add (n-i) after removing it
       numerator*=(n-i);
       numerator%=mod;
   }
   cout<<sum;
   return 0;
}